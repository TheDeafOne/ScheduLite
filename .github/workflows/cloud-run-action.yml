# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run

name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: divine-surface-378820 # TODO: update Google Cloud project id
  GAR_LOCATION: us-central1 # TODO: update Artifact Registry location
  SERVICE: schedulite-webservice # TODO: update Cloud Run service name
  REGION: us-central1 # TODO: update Cloud Run service region

jobs:
  build:
    name: cloud run deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
      uses: actions/checkout@master
      - name: Setup GCP Service Account
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: 'latest'
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Configure Docker
        run: |
          gcloud auth configure-docker
      
      - name: Build
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/schedulite:latest .

      - name: Push
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/schedulite:latest

      - name: Deploy
        run: |
          gcloud run deploy schedulite \
          --region europe-west1 \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/schedulite \
          --platform managed \
          --allow-unauthenticated \
          --project ${{ secrets.GCP_PROJECT_ID }}

    # # Add 'id-token' with the intended permissions for workload identity federation
    # permissions:
    #   contents: 'read'
    #   id-token: 'write'

    # runs-on: ubuntu-latest
    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v3

    #   - name: Google Auth
    #     id: auth
    #     uses: 'google-github-actions/auth@v0'
    #     with:
    #       credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    #   # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)
    #   - name: Print GCP credentials
    #     run: echo "${{ toJSON(steps.auth.outputs) }}"
    #   # Authenticate Docker to Google Cloud Artifact Registry
    #   - name: Docker Auth
    #     id: docker-auth
    #     uses: 'docker/login-action@v2.1.0'
    #     with:
    #       username: 'oauth2accesstoken'
    #       password: '${{ steps.auth.outputs.access_token }}'
    #       registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

    #   - name: Build and Push Container
    #     run: |-
    #       docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./
    #       docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

    #   # END - Docker auth and build

    #   - name: Deploy to Cloud Run
    #     id: deploy
    #     uses: google-github-actions/deploy-cloudrun@v0
    #     with:
    #       service: ${{ env.SERVICE }}
    #       region: ${{ env.REGION }}
    #       # NOTE: If using a pre-built image, update the image name here
    #       image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

    #   # If required, use the Cloud Run url output in later steps
    #   - name: Show Output
    #     run: echo ${{ steps.deploy.outputs.url }}
